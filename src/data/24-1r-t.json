[
    {
      "id": 1,
      "question": "Kaj so sistemski klici?",
      "GPTanswer": "Sistemski klici so vmesnik med uporabniškimi programi in operacijskim sistemom, ki omogočajo izvajanje osnovnih storitev operacijskega sistema, kot so upravljanje datotek, pomnilnika in procesov.",
      "answer": "Nacin na katerega racunalniski program zahteva storitev od jedra OS-a."
    },
    {
      "id": 2,
      "question": "Kateri so argumenti sistemskega klica read in kaj klic vrača?",
      "GPTanswer": "Argumenti sistemskega klica read so datotečni opisovalec, kazalec na pomnilniški prostor in število bajtov za branje. Klic vrača število dejansko prebranih bajtov ali -1 ob napaki.",
      "answer": "Argumente so: int fd (file descriptor), void *buf (pointer to buffer), size_t count (number of bytes to read).\n\nVrne: ssize_t nBytes (numbers of bytes read) ali -1 ob napaki."
    },
    {
      "id": 3,
      "question": "Ali je sistemski klic write buferirana funkcija?",
      "GPTanswer": "Ne, sistemski klic write ni buferirana funkcija. Piše podatke neposredno iz uporabniškega prostora v jedro in nato na napravo.",
      "answer": "Ne, sistemski klic `write` ni buferirana funkcija. Piše podatke neposredno iz v jedro in nato na napravo."
    },
    {
      "id": 4,
      "question": "Kaj je problem funkcije gets?",
      "GPTanswer": "Funkcija gets ne preverja dolžine vhodnega niza, kar lahko povzroči prekoračitev pomnilnika (buffer overflow) in potencialno varnostno ranljivost.",
      "answer": "Funkcija gets ne preverja dolžine vhodnega niza, kar lahko povzroči prekoračitev pomnilnika (buffer overflow)."
    },
    {
      "id": 5,
      "question": "Katere tipe in ustrezne funkcije neformatiranega vhoda v standardni V/I knjižnici poznamo?",
      "GPTanswer": "Tipi neformatiranega vhoda vključujejo getc, getchar, in read. Funkcije: getc bere en znak, getchar je enako kot getc(stdin), read pa bere določen blok podatkov.",
      "answer": "Tipi:\nznakovni: getc, fgetc, getchar\nvrsticni: fgets\ndirektni: fread"
    },
    {
      "id": 6,
      "question": "Kaj počne funkcija popen?",
      "GPTanswer": "Funkcija popen ustvari proces s cevom za komunikacijo med procesi, izvaja ukazno lupino in vrne kazalec na tok za branje ali pisanje.",
      "answer": "Ustvari proces s cevom za komunikacijo med procesi, izvaja ukazno lupino in vrne kazalec na FILE (tok za branje ali pisanje) če OK, sicer NULL."
    },
    {
      "id": 7,
      "question": "Kakšna je razlika med zombijem in siroto (orphan process)?",
      "GPTanswer": "Zombi proces je proces, ki je končal izvajanje, vendar še vedno obstaja v tabeli procesov, ker njegov nadrejeni proces še ni prebral njegovega končnega statusa. Sirota pa je proces, katerega nadrejeni proces je končal, preden je sirota končala.",
      "answer": "Zombi - proces, ki se je končal, vendar še vedno obstaja v tabeli procesov, ker njegov nadrejeni proces še ni prebral njegovega končnega statusa.\nSirota - proces, katerega nadrejeni proces je končal, preden je sirota končala."
    },
    {
      "id": 8,
      "question": "V katerem primeru se pošlje signal SIGCHILD?",
      "GPTanswer": "Signal SIGCHLD se pošlje nadrejenemu procesu, ko eden izmed njegovih podrejenih procesov konča izvajanje ali je ustavljen.",
      "answer": "SIGCHLD se pošlje staršu, ko se otrok konča ali je ustavljen."
    },
    {
      "id": 9,
      "question": "V čem se niti razlikujejo od procesov?",
      "GPTanswer": "Niti znotraj istega procesa delijo isti pomnilniški prostor in vire, kar omogoča lažje in hitrejše sodelovanje, medtem ko procesi običajno delijo manj virov in imajo ločen pomnilniški prostor.",
      "answer": "Nit je najmanjse zaporedje ukazov, ki obstaja znotraj procesa in uporablja negove vire.\nProces je program v izvajanju, ki ima svoj pomnilniski prostor, vire in izvajalno okolje."
    },
    {
      "id": 10,
      "question": "Kakšen je smisel semaforja?",
      "GPTanswer": "Semafor je sinhronizacijski pripomoček, ki se uporablja za nadzor dostopa do skupnih virov v večnitičnem ali večprocesnem okolju, da se preprečijo pogoji dirk (race conditions).",
      "answer": "Kontrolira dostop do nekega skupnega vira (objekta) s strani več niti ali procesov, s preklapljanjem med stanji."
    },
    {
      "id": 11,
      "question": "Kaj je IPC_NOWAIT?",
      "GPTanswer": "IPC_NOWAIT je zastavica, ki se uporablja pri operacijah medprocesne komunikacije, kot so sporočilne vrste, za označevanje, da operacija ne sme blokirati, če sporočilo ni takoj na voljo.",
      "answer": "Zastavica, ki se uporablja pri msgsnd in msgrcv, da takoj vrne napako, če ni prostora ali porocilo takega tipa v vrsto."
    },
    {
      "id": 12,
      "question": "Kje srečamo trojno rokovanje in klik katere funkcije ga začne?",
      "GPTanswer": "Trojno rokovanje srečamo pri vzpostavitvi TCP povezave. Funkcija connect začne ta proces na strani odjemalca.",
      "answer": "Trojno rokovanje srečamo pri vzpostavitvi TCP povezave. Funkcija connect začne ta proces na strani odjemalca."
    },
    {
      "id": 13,
      "question": "Kaj pomenita HBO (host byte order) in NBO (network byte order)?",
      "GPTanswer": "HBO je vrstni red bajtov, ki ga uporablja gostiteljski sistem, NBO pa je standardni vrstni red bajtov, uporabljen v omrežnem prenosu podatkov (big-endian).",
      "answer": "HBO - vrstni red shranjevanja bajtov v pomnilniku gostiteljskega sistema.\nNBO - 32-bitna binarna vrednost, ki se uporablja v omrezju (npr. za pretvarjanje IP stevilke v binarne)."
    },
    {
      "id": 14,
      "question": "Kaj dobimo pri izračunu (a ^ ~b) | (c << d), če so a, b, c in d 8-bitna nepredznačena cela števila: a = 33, b = 47, c = 80 in d = 3?",
      "GPTanswer": "Pri danih vrednostih dobimo rezultat:\n\n~b je bitni NOT od b (vse bite obrne): ~47 je 208.\na ^ ~b je bitni XOR med a in ~b: 33 ^ 208 je 241.\nc << d je c premaknjen za d bitov v levo: 80 << 3 je 640.\n(a ^ ~b) | (c << d) je bitni OR med 241 in 640, kar je 897.",
      "answer": "a = 33, b = 47, c = 80, d = 3\n\n~b = ~47 = 208\na ^ ~b = 33 ^ 208 = 241\nc << d = 80 << 3 = 640\n(a ^ ~b) | (c << d) = 241 | 640 = 897"
    },
    {
      "id": 15,
      "question": "Kako s pomočjo bitnih operacij v jeziku C najmanj pomembne 3 bite 8-bitnega nepredznačenega celega števila negiramo, ne da bi spremenili ostale bite?",
      "GPTanswer": "Za negacijo najmanj pomembnih 3 bitov uporabimo operacijo XOR s številom 7 (0b00000111):\n\nnumber ^= 0x07;",
      "answer": "x XOR 00000111"
    },
    {
      "id": 16,
      "question": "Kako lahko ugotovimo glavno in pomožno število datoteke (major, minor) in kaj predstavljata?",
      "GPTanswer": "Glavno in pomožno število datoteke lahko ugotovimo z uporabo funkcije stat. Glavno število (major) označuje vrsto naprave, pomožno število (minor) pa specifično napravo znotraj te vrste.",
      "answer": "Z ukazon `ls -l` ali `stat`.\n\nMajor - stevilka gonilnika\nMinor - stevilka specifične naprave."
    },
    {
      "id": 17,
      "question": "Katere so prednosti modulov v uporabniškem prostoru?",
      "GPTanswer": "Prednosti modulov v uporabniškem prostoru vključujejo lažje razvijanje in razhroščevanje, izboljšano stabilnost sistema (ker napake v uporabniškem prostoru ne sesujejo sistema) in večjo varnost (omejen dostop do sistemskih virov).",
      "answer": "Lažje razvijanje in razhroščevanje, izboljšana stabilnost sistema (ker napake v user space ne sesujejo sistema) in večja varnost (omejen dostop sistemskih viri)."
    },
    {
      "id": 18,
      "question": "Kaj pomeni 'enoten naslovni prostor'?",
      "GPTanswer": "Enoten naslovni prostor pomeni, da vse niti znotraj istega procesa delijo isti naslovni prostor, kar omogoča neposreden dostop do skupnih podatkov.",
      "answer": "Da se pomnilnik in naprave nahajajo v istem naslovnem prostoru, kar omogoca dostop do naprav preko standardnih pomnilniskih naslovov, brec locenih V/I ukazov. Se imenuje tudi memory-mapped I/O (MMIO)."
    },
    {
      "id": 19,
      "question": "Kaj delata funkciji inb in outb?",
      "GPTanswer": "Funkciji inb in outb izvajata vhodno-izhodne operacije na nizki ravni. inb bere bajt z določene vhodno-izhodne vrata, outb pa zapisuje bajt na določena vhodno-izhodna vrata.",
      "answer": "`inb` bere bajt z določene vhodno-izhodne vrata (port).\n`outb` zapiše bajt na določena vhodno-izhodna vrata (port)."
    },
    {
      "id": 20,
      "question": "Za kaj se pri modulih uporablja struktura file_operations?",
      "GPTanswer": "Struktura file_operations v modulih določa funkcije, ki jih modul podpira za izvajanje operacij na datotekah, kot so odpiranje, branje, pisanje in zapiranje datotek.",
      "answer": "`file_operations` poveže operacije gonilnika s številkami naprav."
    }
  ]